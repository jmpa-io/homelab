---

- name: Setup Tailscale.
  hosts: jmpa_server_3
  become: true
  vars:

    # proxmox.
    node_name: "{{ inventory_hostname | replace('_', '-') }}"
    node_id: "{{ inventory_hostname.split('_')[-1] | int }}"
    node_ip: "{{ hostvars[inventory_hostname].ansible_host }}"
    node_bridge_ip: "{{ hostvars[inventory_hostname].bridge_ip }}"
    node_bridge_name: "{{ hostvars[inventory_hostname].bridge_name }}"

    # proxmox api.
    proxmox_api_ip: "{{ hostvars[inventory_hostname].ansible_host }}"
    proxmox_api_token_secret: "{{ hostvars[inventory_hostname].proxmox_api_token }}"

    # tailscale.
    tailscale_oauth_private_key: "{{ hostvars[inventory_hostname].tailscale_oauth_private_key }}"
    tailscale_routes: "{{ groups['all'] | map('extract', hostvars, 'bridge_ip_subnet') | map('regex_replace', '$', '/24') | join(',') }}"
    tailscale_dns: 127.0.0.1
    tailscale_tags: [ jmpa-server ]

    # container.
    container_id: 15
    container_vmid: "{{ node_id }}{{ container_id }}"
    container_hostname: tailscale
    container_root_password: "{{ hostvars[inventory_hostname].ansible_become_pass }}"
    container_ip: "10.0.{{ node_id }}.{{ container_id }}"
    container_ip_cidr: 24
    container_tags: [ tailscale, vpn ]

  tasks:

    - name: Create LXC Container.
      ansible.builtin.include_role:
        name: "{{ root_playbook_directory }}/roles/create-container"
      register: create_container

    # PLEASE NOTE:
    # This task must be done after the creation of the container because the
    # container is refreshed during the LXC container creation role.
    - name: Add TUN device configuration for LXC Container.
      when: create_container is success
      ansible.builtin.blockinfile:
        path: "/etc/pve/lxc/{{ container_vmid }}.conf"
        block: |
          lxc.cgroup2.devices.allow = c 10:200 rwm
          lxc.mount.entry = /dev/net/tun dev/net/tun none bind,create=file
      delegate_to: "{{ node_ip }}"

    - name: Restart LXC Container to apply TUN configuration.
      when: create_container is success
      ansible.builtin.shell: pct reboot "{{ container_vmid }}"
      delegate_to: "{{ node_ip }}"

    - name: Install Tailscale.
      when: create_container is success
      ansible.builtin.include_role:
        name: "{{ root_playbook_directory }}/roles/execute-script-in-lxc-container"
      vars:
        script_src: tmp/install-tailscale.sh.j2
        script_dest: /tmp/install_tailscale.sh
        script_diff: false

