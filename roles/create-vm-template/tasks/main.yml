---

- name: Ensure required variables are set.
  fail:
    msg: "Required variable {{ item }} is missing!"
  when: vars[item] is not defined
  loop:
    - create_vm_template__proxmox_node_name
    - create_vm_template__proxmox_node_bridge_name
    - create_vm_template__proxmox_api_ip
    - create_vm_template__proxmox_api_token_secret
    - create_vm_template__template_name
    - create_vm_template__template_image_url
    - create_vm_template__template_vmid
    - create_vm_template__template_root_password

- name: Create template, refreshed if needed.
  block:
    - name: Stop and/or remove existing VM.
      community.general.proxmox_kvm:
        api_host: "{{ create_vm_template__proxmox_api_ip }}"
        api_user: "{{ create_vm_template__proxmox_api_user }}"
        api_token_id: "{{ create_vm_template__proxmox_api_token_id }}"
        api_token_secret: "{{ create_vm_template__proxmox_api_token_secret }}"
        node: "{{ create_vm_template__proxmox_node_name }}"
        vmid: "{{ create_vm_template__template_vmid }}"
        state: "{{ item }}"
        timeout: 300
      loop:
        - stopped
        - absent
      ignore_errors: true

    - name: Download image.
      become: true
      ansible.builtin.get_url:
        url: "{{ create_vm_template__template_image_url }}"
        dest: "{{ create_vm_template__temporary_image_path }}"
        mode: "0644"
        force: false

    - name: Bake image with virt-customize.
      become: true
      shell: |
        set -e
        virt-customize -a "{{ create_vm_template__temporary_image_path }}" \
          --install qemu-guest-agent,cloud-init,openssh-server \
          --update \
          --run-command 'apt-get update && DEBIAN_FRONTEND=noninteractive apt-get upgrade -y && apt-get clean' \
          --run-command 'rm -rf /var/lib/apt/lists/*' \
          --run-command 'cloud-init clean' \
          --truncate /etc/machine-id \
          --run-command 'rm -f /etc/netplan/*.yaml /etc/network/interfaces /etc/systemd/network/*.network' || true

    - name: Compress image.
      become: true
      shell: |
        set -e
        qemu-img convert -O qcow2 -c -o preallocation=off \
          "{{ create_vm_template__temporary_image_path }}" \
          "{{ create_vm_template__temporary_compressed_image_path}}"

    - name: Create empty VM.
      community.general.proxmox_kvm:
        api_host: "{{ create_vm_template__proxmox_api_ip }}"
        api_user: "{{ create_vm_template__proxmox_api_user }}"
        api_token_id: "{{ create_vm_template__proxmox_api_token_id }}"
        api_token_secret: "{{ create_vm_template__proxmox_api_token_secret }}"
        node: "{{ create_vm_template__proxmox_node_name }}"
        vmid: "{{ create_vm_template__template_vmid }}"
        name: "{{ create_vm_template__template_name }}"
        cores: "{{ create_vm_template__vm_cores }}"
        memory: "{{ create_vm_template__vm_memory }}"
        net:
          net0: "virtio,bridge={{ create_vm_template__proxmox_node_bridge_name }}"
        ostype: l26
        scsihw: virtio-scsi-pci
        bios: seabios
        machine: q35
        agent: enabled=1
        onboot: false
        tags: [ "building-template" ]
        state: present

    - name: Import disk.
      become: true
      shell: |
        set -e
        qm importdisk "{{ create_vm_template__template_vmid }}" \
          "{{ create_vm_template__temporary_compressed_image_path }}" \
          "{{ create_vm_template__vm_storage }}" \
          --format qcow2

    - name: Ensure VM is stopped before disk attach
      become: true
      shell: |
        if qm status {{ create_vm_template__template_vmid }} 2>/dev/null | grep -q running; then
          qm stop {{ create_vm_template__template_vmid }}
          sleep 2
        fi
      args:
        executable: /bin/bash

    - name: Show current VM config (debug)
      become: true
      shell: qm config {{ create_vm_template__template_vmid }}
      register: qm_config_before
      changed_when: false

    - name: Attach imported disk and set boot (safe)
      become: true
      shell: |
        set -euo pipefail
        VMID={{ create_vm_template__template_vmid }}
        TARGET_SIZE="{{ create_vm_template__vm_disk | default('') }}"
        # find first unused storage ref (e.g. local:10001/vm-10001-disk-2.qcow2)
        DISK_REF=$(qm config "$VMID" | awk '/^unused/ {print $2; exit}' || true)
        if [ -z "$DISK_REF" ]; then
          echo "NO unused disk found for VM $VMID" >&2
          exit 2
        fi
        echo "Found unused disk: $DISK_REF"

        # Save existing scsi0 for rollback (may be empty)
        OLD_SCsi0=$(qm config "$VMID" | awk -F': ' '/^scsi0:/ {print $2; exit}' || true)
        echo "Old scsi0: $OLD_SCsi0" > /tmp/qm-${VMID}-old-scsi0 || true

        # attach as scsi0 and set boot
        qm set "$VMID" --scsi0 "$DISK_REF"
        qm set "$VMID" --boot order=scsi0
        qm set "$VMID" --bootdisk scsi0

        # best-effort resize
        if [ -n "$TARGET_SIZE" ]; then
          qm resize "$VMID" scsi0 "$TARGET_SIZE" || true
        fi

        echo "attached $DISK_REF -> $VMID scsi0"
      args:
        executable: /bin/bash
      register: attach_result

    - name: Show post-change VM config (debug)
      become: true
      shell: qm config {{ create_vm_template__template_vmid }}
      register: qm_config_after
      changed_when: false

    - name: Configure VM with cloud-init.
      community.general.proxmox_kvm:
        api_host: "{{ create_vm_template__proxmox_api_ip }}"
        api_user: "{{ create_vm_template__proxmox_api_user }}"
        api_token_id: "{{ create_vm_template__proxmox_api_token_id }}"
        api_token_secret: "{{ create_vm_template__proxmox_api_token_secret }}"
        node: "{{ create_vm_template__proxmox_node_name }}"
        vmid: "{{ create_vm_template__template_vmid }}"
        name: "{{ create_vm_template__template_name }}"
        serial:
          serial0: socket
        vga: serial0
        ciuser: debian
        cipassword: "{{ create_vm_template__template_root_password }}"
        nameservers: [ "1.1.1.1" ]
        sshkeys: "{{ create_vm_template__ssh_public_key }}"
        update: true
        state: present
        timeout: 600

    - name: Remove existing cloud-init disk (if any)
      become: true
      shell: |
        set -e
        if qm config {{ create_vm_template__template_vmid }} | grep -q '^scsi2:'; then
          qm set {{ create_vm_template__template_vmid }} --delete scsi2
        fi
        find /var/lib/vz/images/{{ create_vm_template__template_vmid }}/ -name "vm-{{ create_vm_template__template_vmid }}-cloudinit.qcow2" -delete || true

    - name: Regenerate cloud-init config.
      become: true
      shell: |
        set -e
        qm set {{ create_vm_template__template_vmid }} --scsi2 {{ create_vm_template__vm_storage }}:cloudinit
        qm cloudinit update {{ create_vm_template__template_vmid }}

    - name: Convert VM to template.
      community.general.proxmox_kvm:
        api_host: "{{ create_vm_template__proxmox_api_ip }}"
        api_user: "{{ create_vm_template__proxmox_api_user }}"
        api_token_id: "{{ create_vm_template__proxmox_api_token_id }}"
        api_token_secret: "{{ create_vm_template__proxmox_api_token_secret }}"
        node: "{{ create_vm_template__proxmox_node_name }}"
        vmid: "{{ create_vm_template__template_vmid }}"
        name: "{{ create_vm_template__template_name }}"
        state: template
        timeout: 120

