---

- name: Ensure required variables are set.
  fail:
    msg: "Required variable {{ item }} is missing!"
  when: vars[item] is not defined
  loop:
    - create_vm__proxmox_node_name
    - create_vm__proxmox_node_bridge_name
    - create_vm__proxmox_api_ip
    - create_vm__proxmox_api_token_secret
    - create_vm__vm_vmid
    - create_vm__vm_hostname
    - create_vm__vm_password
    - create_vm__vm_ip_with_cidr
    - create_vm__vm_gateway
    - create_vm__vm_tags

- name: Create VM, refreshed if needed.
  block:
    - name: Stop and/or remove existing VM.
      community.general.proxmox_kvm:
        api_host: "{{ create_vm__proxmox_api_ip }}"
        api_user: "{{ create_vm__proxmox_api_user }}"
        api_token_id: "{{ create_vm__proxmox_api_token_id }}"
        api_token_secret: "{{ create_vm__proxmox_api_token_secret }}"
        node: "{{ create_vm__proxmox_node_name }}"
        vmid: "{{ create_vm__vm_vmid }}"
        state: "{{ item }}"
        timeout: 300
      loop:
        - stopped
        - absent
      ignore_errors: true

    - name: Remove existing VM disk if present
      become: true
      ansible.builtin.file:
        path: "/var/lib/vz/images/{{ create_vm__vm_vmid }}/vm-{{ create_vm__vm_vmid }}-disk-0.qcow2"
        state: absent

    - name: Remove existing cloud-init disk if present
      become: true
      ansible.builtin.file:
        path: "/var/lib/vz/images/{{ create_vm__vm_vmid }}/vm-{{ create_vm__vm_vmid }}-cloudinit.qcow2"
        state: absent

    - name: Create VM (cloned from template).
      community.general.proxmox_kvm:
        api_host: "{{ create_vm__proxmox_api_ip }}"
        api_user: "{{ create_vm__proxmox_api_user }}"
        api_token_id: "{{ create_vm__proxmox_api_token_id }}"
        api_token_secret: "{{ create_vm__proxmox_api_token_secret }}"
        node: "{{ create_vm__proxmox_node_name }}"
        name: "{{ create_vm__vm_hostname }}"
        clone: "{{ create_vm__vm_clone_from_name }}"
        vmid: "{{ create_vm__vm_clone_from_vmid }}"
        newid: "{{ create_vm__vm_vmid }}"
        ciuser: "{{ create_vm__vm_username }}"
        cipassword: "{{ create_vm__vm_password }}"
        full: true
        state: present
        timeout: 600

    - name: Update VM configuration (tags, etc.).
      community.general.proxmox_kvm:
        api_host: "{{ create_vm__proxmox_api_ip }}"
        api_user: "{{ create_vm__proxmox_api_user }}"
        api_token_id: "{{ create_vm__proxmox_api_token_id }}"
        api_token_secret: "{{ create_vm__proxmox_api_token_secret }}"
        node: "{{ create_vm__proxmox_node_name }}"
        vmid: "{{ create_vm__vm_vmid }}"
        tags: "{{ create_vm__vm_tags }}"
        state: present
        update: true

    - name: Set IP config.
      become: true
      shell: |
        set -e
        qm set {{ create_vm__vm_vmid }} --ipconfig0 'ip={{ create_vm__vm_ip_with_cidr }},gw={{ create_vm__vm_gateway}}'

    - name: Start VM.
      community.general.proxmox_kvm:
        api_host: "{{ create_vm__proxmox_api_ip }}"
        api_user: "{{ create_vm__proxmox_api_user }}"
        api_token_id: "{{ create_vm__proxmox_api_token_id }}"
        api_token_secret: "{{ create_vm__proxmox_api_token_secret }}"
        node: "{{ create_vm__proxmox_node_name }}"
        vmid: "{{ create_vm__vm_vmid }}"
        state: started

    - name: Wait for SSH to become available.
      wait_for:
        host: "{{ create_vm__vm_ip_with_cidr.split('/')[0] }}"
        port: 22
        delay: 10
        timeout: 120

  rescue:
    - name: Cleanup VM if creation fails.
      community.general.proxmox_kvm:
        api_host: "{{ create_vm__proxmox_api_ip }}"
        api_user: "{{ create_vm__proxmox_api_user }}"
        api_token_id: "{{ create_vm__proxmox_api_token_id }}"
        api_token_secret: "{{ create_vm__proxmox_api_token_secret }}"
        node: "{{ create_vm__proxmox_node_name }}"
        vmid: "{{ create_vm__vm_vmid }}"
        state: "{{ item }}"
      loop:
        - stopped
        - absent
      ignore_errors: true

