---

- name: Ensure required variables are set.
  fail:
    msg: "Required variable {{ item }} is missing!"
  when: vars[item] is not defined
  loop:

    # node.
    - node_name                 # name of the proxmox node;                       eg. jmpa-server-1.
    - node_id                   # id in node name;                                eg. jmpa-server-1 <- just the '1'.
    - node_ip                   # the ip address of the node.                     eg. 192.168.1.158.
    - node_bridge_ip            # the ip address of the bridge on the host.       eg. 10.0.1.1.
    - node_bridge_name          # the name of the bridge on the host.             eg. vmbr0.

    # proxmox api.
    - proxmox_api_ip            # ip address for proxmox api;                     eg. 192.168.1.158.
    - proxmox_api_token_secret  # api token for proxmox api;                      eg. xxxx.

    # container.
    - container_id              # id of container;                                eg. 15.
    - container_hostname        # name of container;                              eg. tailscale.
    - container_root_password   # root password;                                  eg. xxxx.
    - container_ip              # static ipv4 address for container;              eg. 10.0.1.115.
    - container_ip_cidr         # cidr for static ipv4 address for container_gw;  eg. 24.

- name: Create LXC Container, refreshed if needed.
  block:
    - name: Stop and / or remove existing LXC container.
      community.general.proxmox:
        api_host: "{{ proxmox_api_ip }}"
        api_user: "{{ proxmox_api_user }}"
        api_token_id: "{{ proxmox_api_token_id }}"
        api_token_secret: "{{ proxmox_api_token_secret }}"
        node: "{{ node_name }}"
        vmid: "{{ container_vmid }}"
        state: "{{ item }}"
        unprivileged: true
      loop:
        - stopped
        - absent
      ignore_errors: true

    - name: Create LXC container.
      community.general.proxmox:
        api_host: "{{ proxmox_api_ip }}"
        api_user: "{{ proxmox_api_user }}"
        api_token_id: "{{ proxmox_api_token_id }}"
        api_token_secret: "{{ proxmox_api_token_secret }}"
        node: "{{ node_name }}"
        vmid: "{{ container_vmid }}"
        hostname: "{{ container_hostname }}"
        ostemplate: "{{ container_ostemplate }}"
        cores: "{{ container_cores }}"
        memory: "{{ container_memory }}"
        # disk: "{{ container_disk }}"
        tags: "{{ container_tags }}"
        password: "{{ container_root_password }}"
        netif:
          net0: "name=eth0,gw={{ node_bridge_ip }},ip={{ container_ip }}/{{ container_ip_cidr }},bridge={{ node_bridge_name }}"
        nameserver: "{{ node_ip }}"
        unprivileged: true
        features:
          - nesting=1
        pubkey: "{{ lookup('file', container_ssh_pubkey) }}"
        onboot: 1
        state: present

    - name: Start LXC container.
      community.general.proxmox:
        api_host: "{{ proxmox_api_ip }}"
        api_user: "{{ proxmox_api_user }}"
        api_token_id: "{{ proxmox_api_token_id }}"
        api_token_secret: "{{ proxmox_api_token_secret }}"
        node: "{{ node_name }}"
        vmid: "{{ container_vmid }}"
        state: started

    - name: Wait for SSH to become available.
      wait_for:
        host: "{{ container_ip }}"
        port: 22
        delay: 10
        timeout: 30

    - name: Install dependencies inside LXC container.
      ansible.builtin.include_role:
        name: "{{ root_playbook_directory }}/roles/execute-script-in-lxc-container"
      vars:
        script_src: "{{ root_playbook_directory }}/roles/create-container/templates/install-deps.sh.j2"
        script_dest: /tmp/install_deps.sh

  rescue:
    - name: Error encountered, clean up LXC container if needed.
      community.general.proxmox:
        api_host: "{{ proxmox_api_ip }}"
        api_user: "{{ proxmox_api_user }}"
        api_token_id: "{{ proxmox_api_token_id }}"
        api_token_secret: "{{ proxmox_api_token_secret }}"
        node: "{{ node_name }}"
        vmid: "{{ container_vmid }}"
        state: "{{ item }}"
        unprivileged: true
      loop:
        - stopped
        - absent
      ignore_errors: true

